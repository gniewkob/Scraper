"use strict"
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page", {
  /***/ "(app-pages-browser)/./src/lib/api.ts":
    /*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
    /***/ (module, __webpack_exports__, __webpack_require__) => {
      eval(
        __webpack_require__.ts(
          '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ "(app-pages-browser)/../node_modules/next/dist/build/polyfills/process.js");\n// API client for medical marijuana price comparison dashboard\nvar _process_env, _process_env1, _process_env2;\nconst NEXT_PUBLIC_API_URL = typeof process !== "undefined" ? (_process_env = process.env) === null || _process_env === void 0 ? void 0 : _process_env.NEXT_PUBLIC_API_URL : undefined;\nconst NEXT_PUBLIC_HOST = typeof process !== "undefined" ? (_process_env1 = process.env) === null || _process_env1 === void 0 ? void 0 : _process_env1.NEXT_PUBLIC_HOST : undefined;\nconst NEXT_PUBLIC_BACKEND_PORT = typeof process !== "undefined" ? (_process_env2 = process.env) === null || _process_env2 === void 0 ? void 0 : _process_env2.NEXT_PUBLIC_BACKEND_PORT : undefined;\nfunction defaultApiUrl() {\n    const host = NEXT_PUBLIC_HOST || ( true ? window.location.hostname : 0);\n    const port = NEXT_PUBLIC_BACKEND_PORT || "38273";\n    return "http://".concat(host, ":").concat(port, "/api");\n}\nconst API_BASE_URL = NEXT_PUBLIC_API_URL || defaultApiUrl();\nconst MOCK_CITIES = [\n    "Warszawa",\n    "Kraków",\n    "Gdańsk",\n    "Wrocław",\n    "Poznań",\n    "Łódź",\n    "Katowice",\n    "Szczecin",\n    "Lublin",\n    "Bydgoszcz"\n];\nconst MOCK_STATS = {\n    total_products: 1337,\n    total_dispensaries: 42,\n    avg_price: 35.5,\n    cities_covered: 10,\n    last_updated: new Date().toISOString()\n};\nconst MOCK_PRODUCTS = [\n    {\n        id: "1",\n        name: "🛸 Alien OG",\n        strain_type: "hybrid",\n        thc_content: 24.5,\n        cbd_content: 0.8,\n        price: 45.0,\n        dispensary: "🌌 Green Galaxy",\n        location: "Warszawa",\n        availability: true,\n        rating: 4.8\n    },\n    {\n        id: "2",\n        name: "🍪 Space Cookies",\n        strain_type: "indica",\n        thc_content: 22.1,\n        cbd_content: 1.2,\n        price: 38.5,\n        dispensary: "👽 Cosmic Cannabis",\n        location: "Kraków",\n        availability: true,\n        rating: 4.6\n    },\n    {\n        id: "3",\n        name: "🚀 UFO Kush",\n        strain_type: "sativa",\n        thc_content: 26.8,\n        cbd_content: 0.5,\n        price: 52.0,\n        dispensary: "🌿 Stellar Strains",\n        location: "Gdańsk",\n        availability: false,\n        rating: 4.9\n    }\n];\nclass ApiClient {\n    async makeRequest(endpoint, options) {\n        try {\n            const response = await fetch("".concat(API_BASE_URL).concat(endpoint), {\n                headers: {\n                    "Content-Type": "application/json",\n                    ...options === null || options === void 0 ? void 0 : options.headers\n                },\n                ...options\n            });\n            if (!response.ok) {\n                throw new Error("HTTP error! status: ".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            throw error;\n        }\n    }\n    async searchProducts(filters) {\n        try {\n            const params = new URLSearchParams();\n            if (filters.city) params.append("city", filters.city);\n            if (filters.strain_type) params.append("strain_type", filters.strain_type);\n            if (filters.max_price) params.append("max_price", filters.max_price.toString());\n            if (filters.min_thc) params.append("min_thc", filters.min_thc.toString());\n            if (filters.max_thc) params.append("max_thc", filters.max_thc.toString());\n            if (filters.min_cbd) params.append("min_cbd", filters.min_cbd.toString());\n            if (filters.max_cbd) params.append("max_cbd", filters.max_cbd.toString());\n            if (filters.radius) params.append("radius", filters.radius.toString());\n            const queryString = params.toString();\n            const endpoint = "/search".concat(queryString ? "?".concat(queryString) : "");\n            return await this.makeRequest(endpoint);\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            let filteredProducts = [\n                ...MOCK_PRODUCTS\n            ];\n            if (filters.city) {\n                filteredProducts = filteredProducts.filter((p)=>p.location.toLowerCase().includes(filters.city.toLowerCase()));\n            }\n            if (filters.strain_type) {\n                filteredProducts = filteredProducts.filter((p)=>p.strain_type === filters.strain_type);\n            }\n            if (filters.max_price) {\n                filteredProducts = filteredProducts.filter((p)=>p.price <= filters.max_price);\n            }\n            return {\n                products: filteredProducts,\n                total_count: filteredProducts.length,\n                avg_price: filteredProducts.reduce((sum, p)=>sum + p.price, 0) / filteredProducts.length,\n                lowest_price: Math.min(...filteredProducts.map((p)=>p.price)),\n                highest_price: Math.max(...filteredProducts.map((p)=>p.price))\n            };\n        }\n    }\n    async getStats() {\n        try {\n            return await this.makeRequest("/stats");\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            return MOCK_STATS;\n        }\n    }\n    async getCities() {\n        try {\n            return await this.makeRequest("/cities");\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            return MOCK_CITIES;\n        }\n    }\n    async getProduct(id) {\n        try {\n            return await this.makeRequest("/products/".concat(id));\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            return MOCK_PRODUCTS.find((p)=>p.id === id) || MOCK_PRODUCTS[0];\n        }\n    }\n    async getProductsByCity(city) {\n        try {\n            return await this.makeRequest("/products/city/".concat(encodeURIComponent(city)));\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 400));\n            return MOCK_PRODUCTS.filter((p)=>p.location.toLowerCase().includes(city.toLowerCase()));\n        }\n    }\n    async getBestDeals() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        try {\n            return await this.makeRequest("/deals/best?limit=".concat(limit));\n        } catch (error) {\n            await new Promise((resolve)=>setTimeout(resolve, 350));\n            return MOCK_PRODUCTS.slice(0, limit);\n        }\n    }\n}\nconst apiClient = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we\'re in a\n        // browser context before continuing.\n        if (typeof self !== \'undefined\' &&\n            // AMP / No-JS mode does not inject these helpers:\n            \'$RefreshHelpers$\' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we\'ll check if it\'s\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we\'ll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it\'s possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n',
        ),
      )

      /***/
    },
})
