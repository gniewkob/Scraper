name: CI (scraper)

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  commitlint:
    name: PR Title (Conventional Commits)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm i -D @commitlint/cli @commitlint/config-conventional
      - name: Lint PR title
        if: github.event_name == 'pull_request'
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint
      - name: Skip on push (no PR)
        if: github.event_name == 'push'
        run: echo "Skipping commitlint on push"

  lint_and_test:
    name: Lint & Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: commitlint
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    env:
      CI: true
      HEADLESS: true
      DB_URL: sqlite+aiosqlite:///tmp/test.db

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }

      # --- Python ---
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ hashFiles('**/requirements*.txt') }}-
            ${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip wheel setuptools

      - name: Install Python dependencies
        run: |
          if [ -f "requirements-ci.txt" ]; then pip install -r requirements-ci.txt; fi
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          # WAŻNE: zapewnij Selenium Managera
          pip install "selenium>=4.12" ruff pytest pytest-cov
          pip install mypy || true

      - name: Audit Python dependencies (pip-audit)
        run: |
          python -m pip install --upgrade pip-audit
          # Produce JSON report of installed env; tolerate nonzero exit (vulns found)
          pip-audit -l -f json --progress-spinner off > audit.json || true

      - name: Fail on critical vulnerabilities
        run: |
          # Only report critical vulns and fail if any are found
          set -e
          if [ ! -f audit.json ]; then pip-audit -l -f json --progress-spinner off > audit.json || true; fi
          python - <<'PY'
          import json, sys
          from pathlib import Path
          p = Path('audit.json')
          if not p.exists():
              print('No audit.json found; skipping fail-on-critical.')
              sys.exit(0)
          raw = p.read_text().strip()
          data = json.loads(raw) if raw else []
          # Support both older list form and newer object with 'dependencies'
          if isinstance(data, dict):
              deps = data.get('dependencies') or []
          elif isinstance(data, list):
              deps = data
          else:
              deps = []
          crit = []
          for pkg in deps:
              if not isinstance(pkg, dict):
                  continue
              for v in (pkg.get('vulns') or []):
                  sev = (v.get('severity') or (v.get('advisory') or {}).get('severity') or '').upper()
                  if sev == 'CRITICAL':
                      crit.append({
                          'package': f"{pkg.get('name')}=={pkg.get('version')}",
                          'id': v.get('id'),
                          'severity': sev,
                          'fix_versions': v.get('fix_versions')
                      })
          if crit:
              print('Critical vulnerabilities found:')
              for c in crit:
                  print(f" - {c['package']}: {c['id']} (severity={c['severity']}) fix: {c['fix_versions']}")
              sys.exit(1)
          print('No critical vulnerabilities found.')
          PY

      # --- Systemowe biblioteki dla Chrome (Ubuntu 24.04) ---
      - name: Install system deps for headless browsers
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libxss1 libnss3 libasound2t64 libgbm1 libu2f-udev \
            fonts-liberation xdg-utils xvfb

      # --- Chrome for Testing (z pasującym driverem zarządzanym przez Selenium Manager) ---
      - name: Setup Chrome (Chrome for Testing)
        id: chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Export CHROME_BIN
        run: echo "CHROME_BIN=${{ steps.chrome.outputs.chrome-path }}" >> $GITHUB_ENV

      - name: Verify Chrome
        run: |
          "${{ steps.chrome.outputs.chrome-path }}" --version

      # --- Node (globalny cache dla root + frontend) ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install backend deps (root)
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Install frontend deps
        if: hashFiles('frontend/package-lock.json') != ''
        working-directory: frontend
        run: npm ci

      # --- Lint / Types ---
      - name: Ruff (lint)
        run: ruff check .
      - name: mypy (optional)
        run: |
          if [ -f "mypy.ini" ] || grep -q "\[tool\.mypy\]" pyproject.toml 2>/dev/null; then
            mypy .
          else
            echo "No mypy config found — skipping."
          fi
        continue-on-error: true

      # --- Testy ---
      # Jeśli Twoje testy wymagają wirtualnego ekranu, odkomentuj:
      # - name: Run tests (with Xvfb)
      #   run: xvfb-run -a bash scripts/run_ci_tests.sh
      - name: Run tests
        run: bash scripts/run_ci_tests.sh

      # --- Artefakty ---
      - name: Upload coverage
        if: always() && hashFiles('**/coverage.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: "**/coverage.xml"
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload junit
        if: always() && hashFiles('**/junit*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: |
            **/junit*.xml
            **/test-results/**/*.xml
          if-no-files-found: ignore
          retention-days: 7

  browser_tests:
    name: Browser Tests (${{ matrix.variant }})
    runs-on: ubuntu-latest
    needs: lint_and_test
    timeout-minutes: 40
    env:
      CI: true
      HEADLESS: true
    strategy:
      fail-fast: false
      matrix:
        variant: [selenium_xvfb, playwright_headed, xhr_capture]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run selenium image
        if: matrix.variant == 'selenium_xvfb'
        env:
          TARGET_URL: ${{ secrets.TARGET_URL }}
          MIN_OFFERS: ${{ secrets.MIN_OFFERS }}
        run: |
          docker build -t scraper -f Dockerfile.scrape .
          docker run --rm --network host -e TARGET_URL -e MIN_OFFERS scraper

      - name: Setup Python
        if: matrix.variant != 'selenium_xvfb'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        if: matrix.variant != 'selenium_xvfb'
        run: |
          pip install -r requirements.txt -r requirements-ci.txt
          playwright install --with-deps firefox

      - name: Run Playwright headed tests
        if: matrix.variant == 'playwright_headed'
        run: pytest tests/test_playwright_headed.py

      - name: Run XHR capture tests
        if: matrix.variant == 'xhr_capture'
        run: pytest tests/test_xhr_capture.py

      - name: Upload selenium screenshot
        if: matrix.variant == 'selenium_xvfb' && always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium_screenshot
          path: selenium.png

      - name: Upload Playwright screenshot
        if: matrix.variant == 'playwright_headed' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright_screenshot
          path: playwright.png

      - name: Upload network HAR
        if: matrix.variant == 'xhr_capture' && always()
        uses: actions/upload-artifact@v4
        with:
          name: network_har
          path: network.har

      - name: Upload XHR log
        if: matrix.variant == 'xhr_capture' && always()
        uses: actions/upload-artifact@v4
        with:
          name: xhr_json
          path: xhr.json
