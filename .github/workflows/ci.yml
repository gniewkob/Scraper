name: CI (scraper)

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

# Anuluj starsze uruchomienia dla tego samego brancha/PR
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  commitlint:
    name: PR Title (Conventional Commits)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install commitlint
        run: npm i -D @commitlint/cli @commitlint/config-conventional

      # Lintujemy TYTUŁ PR, nie historię commitów
      - name: Lint PR title
        if: github.event_name == 'pull_request'
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint

      # Jeśli to push (bez PR), nie blokuj — przepuść
      - name: Skip on push (no PR)
        if: github.event_name == 'push'
        run: echo "Skipping commitlint on push"

  lint_and_test:
    name: Lint & Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: commitlint
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    env:
      CI: true
      HEADLESS: true
      DB_URL: sqlite+aiosqlite:///tmp/test.db
      # Ułatwienia dla Selenium/Chrome
      CHROME_BIN: /usr/bin/google-chrome
      CHROMEDRIVER_PATH: /usr/local/bin/chromedriver

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # ---------- Python ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Cache pip (extra safety)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ hashFiles('**/requirements*.txt') }}-
            ${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip wheel setuptools

      - name: Install Python dependencies
        run: |
          if [ -f "requirements-ci.txt" ]; then pip install -r requirements-ci.txt; fi
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          # Narzędzia CI (jeśli nie są w requirements)
          pip install ruff pytest pytest-cov
          pip install mypy || true

      # ---------- System + Chrome dla Selenium ----------
      - name: Install system deps for headless browsers (robust)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libxss1 libnss3 libgbm1 libu2f-udev fonts-liberation xdg-utils xvfb
          # asound: t64 on Noble; try legacy name if t64 not found
          if apt-cache show libasound2t64 >/dev/null 2>&1; then
            sudo apt-get install -y --no-install-recommends libasound2t64
          else
            sudo apt-get install -y --no-install-recommends libasound2 || true
          fi


      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2
        with:
          chromedriver-version: latest

      - name: Verify Chrome & Driver
        run: |
          google-chrome --version
          chromedriver --version

      # ---------- Node (globalny cache dla backend + frontend) ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install backend deps (root)
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Install frontend deps
        if: hashFiles('frontend/package-lock.json') != ''
        working-directory: frontend
        run: npm ci

      # ---------- Lint / Type check ----------
      - name: Ruff (lint)
        run: ruff check .
        continue-on-error: false

      - name: mypy (optional)
        run: |
          if [ -f "mypy.ini" ] || grep -q "\[tool\.mypy\]" pyproject.toml 2>/dev/null; then
            mypy .
          else
            echo "No mypy config found — skipping."
          fi
        continue-on-error: true

      # ---------- Testy ----------
      # Jeśli Twoje testy Selenium wymagają wirtualnego ekranu, użyj xvfb-run:
      # - name: Run tests (with Xvfb)
      #   run: xvfb-run -a bash scripts/run_ci_tests.sh
      - name: Run tests
        run: bash scripts/run_ci_tests.sh

      # ---------- Artefakty ----------
      - name: Upload coverage
        if: always() && hashFiles('**/coverage.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: "**/coverage.xml"
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload junit
        if: always() && hashFiles('**/junit*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: |
            **/junit*.xml
            **/test-results/**/*.xml
          if-no-files-found: ignore
          retention-days: 7
