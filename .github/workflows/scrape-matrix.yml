name: Scrape Matrix

on:
  workflow_dispatch:

jobs:
  selenium_xvfb:
    runs-on: ubuntu-latest
    env:
      CI: true
      HEADLESS: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run selenium image
        env:
          TARGET_URL: ${{ secrets.TARGET_URL }}
          MIN_OFFERS: ${{ secrets.MIN_OFFERS }}
        run: |
          docker build -t scraper -f Dockerfile.scrape .
          docker run --rm --network host -e TARGET_URL -e MIN_OFFERS scraper

      - name: Upload selenium artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium_xvfb
          path: |
            selenium.png
            metrics_selenium_xvfb.json

  playwright:
    runs-on: ubuntu-latest
    env:
      CI: true
      HEADLESS: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt -r requirements-ci.txt
          playwright install --with-deps chromium

      - name: Run Playwright tests
        run: pytest tests/test_playwright_headed.py

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright
          path: |
            playwright.png
            metrics_playwright.json

  xhr_capture:
    runs-on: ubuntu-latest
    env:
      CI: true
      HEADLESS: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt -r requirements-ci.txt
          playwright install --with-deps chromium

      - name: Run XHR capture tests
        run: pytest tests/test_xhr_capture.py

      - name: Upload XHR artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xhr_capture
          path: |
            network.har
            xhr.json
            metrics_xhr_capture.json

  summary:
    runs-on: ubuntu-latest
    needs: [selenium_xvfb, playwright, xhr_capture]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: metrics

      - name: Create summary
        run: |
          python <<'PY'
import json, glob, os
metrics = []
for path in glob.glob('metrics/*/metrics_*.json'):
    with open(path) as f:
        data = json.load(f)
    runner = os.path.basename(path)[8:-5]
    data.setdefault('runner', runner)
    metrics.append(data)
with open('summary.txt', 'w') as f:
    json.dump(metrics, f)
best = max(metrics, key=lambda m: (m.get('products_found', 0), m.get('fields_non_null_pct', 0)))
print(f"BEST: {best['runner']}")
PY

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: summary.txt
